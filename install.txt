
=========================================
INSTALL.txt
C9@ETF project (c) 2015-2019
=========================================


INSTALL INSTRUCTIONS

Install the following packages on Ubuntu 16.04 LTS or 18.04 LTS:
build-essential
nginx
php-fpm 
php-cli
php-ldap
php-mbstring
php-xml
python (2.7)
inotify-tools
subversion
git
apache2-utils

On Ubuntu 20.04 LTS also add: locales-all

C9 admin page also uses php-svn package but it no longer supports php7 (see errata).

Optional:
gdb
gdbserver - without this debugging in C/C++ programs will just give an error (cloud9)
astyle - formatting C/C++/Java programs (cloud9)
sqlite3 - for debugging svn problems
valgrind - (cloud9, hopefully theia soon)
zip - required for automated testing (buildservice)
clangd - error reports (theia)

Note: Theia requires at least clangd 10 which is shipped with Ubuntu 20.04. If using
older distro, you must install clangd from upstream

Make sure that nginx and php-fpm processes are started automatically with OS startup.

We strongly suggest that ntp is installed and configured so that time is accurate,
or at least that clocks on all nodes are synchronized.



OPERATING SYSTEM CONFIGURATION

To disable apport and enable core dump detection do the following:

1. Edit /etc/default/apport so that it reads
enabled=0
2. In /etc/sysctl.d create a new file named 60-core-pattern.conf with contents:
kernel.core_pattern = core
3. To apply the changes immediately run:
sudo sysctl --system

To prevent users from reading eachothers files, edit /etc/login.defs, find line
that says:
UMASK		022
and set it to:
UMASK		077

In production environments we suggest to have another look at php configuration,
especially to increase the amount of available memory. Make sure to apply all
changes to nginx configuration in the file nginx.skeleton.conf in
/usr/local/webide.

On Ubuntu 18.04 LTS, for performance reasons we suggest to disable accounts-daemon
service (not useful on a headless server):

 $ sudo systemctl disable accounts-daemon.service



C9 INSTALLATION

1. Clone c9etf repository in a folder, e.g. /usr/local/webide. 

 $ cd /usr/local
 $ sudo git clone https://github.com/vljubovic/c9etf webide


2. Copy file lib/config.php.default to lib/config.php and edit it to your needs.
Defaults are just fine for test install.


3. Run install.php. This script will make various changes to your system:

 $ cd /usr/local/webide
 $ sudo php install.php


4. Create a local user named 'admin' so you could access the admin web interface:

 $ sudo /usr/local/webide/bin/webidectl add-local-user admin PASSWORD

This user will automatically become a member of "sysadmin" group (see config.php).
Instead of PASSWORD insert the password that you wish to use. Create another local 
user so you can test the webide:

 $ sudo /usr/local/webide/bin/webidectl add-local-user test PASSWORD


5. Visit webpage

http://yourhost/ (login as user "test").

http://yourhost/admin.php (login as user "admin")



POST-INSTALL CONFIGURATION

- nginx
Every time a user logs in/out of cloud9 your nginx configuration is overwritten
by webidectl. Default nginx configuration is good enough for standalone server, 
but if you want to change it (i.e. add letsencrypt certificate), instead of 
editing /etc/nginx, you should now edit file 
/usr/local/webide/nginx.skeleton.conf

The best idea is to run letsencrypt and then manually copy all changes from 
/etc/nginx/... to nginx.skeleton.conf

- buildservice
By default after first installation the automated testing functionality doesn't
work. You have to configure buildservice using instructions at
http://github.com/etf-sarajevo/buildservice

Buildservice config.php is in folder /usr/local/webide/web/buildservice



UPDATING CLOUD9

To update your Cloud9 IDE from upstream, you can use update-cloud9 script. First
update the C9@ETF so that you receive latest versions of patches

 $ cd /usr/local/webide
 $ sudo git pull
 $ sudo php update-cloud9.php

This installs Cloud9 into a folder named c9upstream and applies all the patches.
Please look closely if all the patches are applied correctly, otherwise system 
may not work. Look for messages such as "Hunk #1 FAILED" or "File not found".
If any of these happen, please let us know so we can fix our patches.

If everything looks good, you can temporarily replace your old install with the 
new one (make sure all users are logged out otherwise they might complain ;)

 $ sudo mv /usr/local/webide/c9fork /usr/local/webide/c9old
 $ sudo mv /usr/local/webide/c9upstream /usr/local/webide/c9fork
 
If all works well you can remove old directory to free up some space. Otherwise,
its easy to revert to the old version:

 $ sudo mv /usr/local/webide/c9fork /usr/local/webide/c9upstream
 $ sudo mv /usr/local/webide/c9old /usr/local/webide/c9fork

Note that git will reset permissions on all modified files to your umask, so if
you set umask to 022 as recommended, after git pull many of files will become 
unreadable and the web interface will break. Unfortunatelly, the only solution 
for this is to use a script such as git-cache-meta.sh 
https://gist.github.com/andris9/1978266.
 
